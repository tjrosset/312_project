Flask uses the Werkzeug library for a lot of its data handling in WSGI. In relation to what we use/saw, Werkzeug includes a response object that can wrap other WSGI applications and handle streaming data, and a routing system for matching URLs to endpoints and generating URLs for endpoints. 

Looking into its base_request.py it has functions dedicated to data buffer, headers, cookies, and query strings which were topics seen in Lecture. 

get_data():
https://github.com/pallets/werkzeug/blob/d6e98a0105ea126f10c432d33f101ec793df6440/src/werkzeug/wrappers/base_request.py#L428

Reads the buffered incoming data from the client into a byte string. 

cookies():
https://github.com/pallets/werkzeug/blob/d6e98a0105ea126f10c432d33f101ec793df6440/src/werkzeug/wrappers/base_request.py#L518

Gets our cookies

headers()
https://github.com/pallets/werkzeug/blob/d6e98a0105ea126f10c432d33f101ec793df6440/src/werkzeug/wrappers/base_request.py#L529

path():
https://github.com/pallets/werkzeug/blob/d6e98a0105ea126f10c432d33f101ec793df6440/src/werkzeug/wrappers/base_request.py#L536

Returns the request path

